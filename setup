#!/bin/bash

set -e

DIR=$( cd "$( dirname "$0" )" && pwd )
DOTFILES=$DIR/dotfiles

linked() {
    ln -shf "$DOTFILES/$1" "$HOME/$1"
}

dotfiles() {
    echo "Linking all dotfiles to home directory"

    linked ".irbrc"
    linked ".gitconfig"
    linked ".tmux.conf"
    linked ".tmuxinator"
    linked ".emacs.d"
    linked ".gemrc"

    linked "bin"

    mkdir -p ~/.config
    linked ".config/fish"

    mkdir -p ~/Library/Application\ Support/Code/User
    linked "Library/Application Support/Code/User/settings.json"
    linked "Library/Application Support/Code/User/keybindings.json"
    linked ".vscode/extensions/vroy-code"

    mkdir -p ~/Library/KeyBindings
    linked "Library/KeyBindings/DefaultKeyBinding.dict"
}

updateBrew() {
    set +e

    which brew
    if [ $? -ne 0 ] ; then
        echo Installing Homebrew
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    echo Updating Homebrew
    brew update
    brew upgrade

    # Create /usr/local/Frameworks/ required for python.
    FW="/usr/local/Frameworks"

    stat "$FW" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "[sudo] Creating $FW"
        sudo mkdir -p "$FW"
    fi

    MY_ID=$(id -u)
    FW_ID=$(stat -f "%u" "$FW")
    if [[ "$MY_ID" -ne "$FW_ID" ]]; then
        echo "[sudo] Changing ownership of $FW"
        sudo chown $(whoami):admin "$FW"
    fi
    set -e
}

brewBundle() {
    echo Installing packages from Brewfile
    brew bundle --verbose
}

iTermConfig() {
    # Specify the preferences directory
    defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string "$DIR/dotfiles/iterm"

    # Tell iTerm2 to use the custom preferences in the directory
    defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true
}

setFishShell() {
    echo Setting shell to fish
    # Add fish to shells
    grep fish /etc/shells
    if [ $? -ne 0 ]; then
        sudo sh -c "echo /usr/local/bin/fish >> /etc/shells"
        # Change shell to fish
        chsh -s /usr/local/bin/fish
    fi
}

installGems() {
    gem install ruby-keychain
    gem install octokit
    gem install tmuxinator
}

installOthers() {
    go get github.com/vroy/git-gb
}

osxDefaults() {
    echo Mac OS Defaults
    ./os_x_defaults.sh
}

codeExtensions() {
    echo Installing VS Code Extensions

    # Editor
    code --install-extension christian-kohler.path-intellisense
    code --install-extension christian-kohler.npm-intellisense
    code --install-extension EditorConfig.editorconfig
    code --install-extension lfs.vscode-emacs-friendly
    code --install-extension slevesque.vscode-multiclip
    code --install-extension ziyasal.vscode-open-in-github

    # Languages
    code --install-extension bierner.markdown-mermaid
    code --install-extension bierner.markdown-preview-github-styles
    code --install-extension erd0s.terraform-autocomplete
    code --install-extension JPTarquino.postgresql
    code --install-extension lukehoban.Go
    code --install-extension mauve.terraform
    code --install-extension ms-python.python
    code --install-extension PeterJausovec.vscode-docker
    code --install-extension rebornix.ruby
    code --install-extension robinbentley.sass-indented
    code --install-extension yzhang.markdown-all-in-one

    # VueJS and JavaScript
    code --install-extension dbaeumer.vscode-eslint
    code --install-extension octref.vetur
    code --install-extension dariofuzinato.vue-peek
}

configurePython() {
    echo "Updating pip"
    pip3 install --upgrade pip setuptools wheel

    pip3 install requests

    # For VS Code
    pip2 install pylint
}

buildBase62() {
    cd uuid-base62-converter; ./build.sh
}

dotfiles
updateBrew
brewBundle
configurePython
installGems
installOthers
iTermConfig
setFishShell
osxDefaults
codeExtensions
buildBase62